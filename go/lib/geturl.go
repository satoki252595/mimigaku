package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

// APIから返されるJSONの構造を定義する
type AutoGenerated struct {
	DataList []struct {
		SiteID          string    `json:"site_id"`
		ProgramName     string    `json:"program_name"`
		ProgramNameKana string    `json:"program_name_kana"`
		MediaCode       string    `json:"media_code"`
		CornerID        string    `json:"corner_id"`
		CornerName      string    `json:"corner_name"`
		ThumbnailP      string    `json:"thumbnail_p"`
		ThumbnailC      any       `json:"thumbnail_c"`
		OpenTime        time.Time `json:"open_time"`
		CloseTime       time.Time `json:"close_time"`
		OnairDate       string    `json:"onair_date"`
		LinkURL         any       `json:"link_url"`
		StartTime       time.Time `json:"start_time"`
		UpdateTime      time.Time `json:"update_time"`
		Dev             time.Time `json:"dev"`
		DetailJSON      string    `json:"detail_json"`
	} `json:"data_list"`
}

func main() {
	// http.Getを用いて外部APIを呼び出す
	resp, err := http.Get("https://www.nhk.or.jp/radioondemand/json/index_v3/index.json")
	// エラーハンドリング
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	} else {
		// io.ReadAllでレスポンスボディを全て読み取る
		data, _ := io.ReadAll(resp.Body)

		var responseObject AutoGenerated
		// json.UnmarshalでJSONデータをGoのオブジェクトに変換する
		json.Unmarshal(data, &responseObject)

		newList := make([][]string, 0)
		m := make(map[string]struct{})

		for _, p := range responseObject.DataList {
			if _, ok := m[p.SiteID]; !ok {
				m[p.SiteID] = struct{}{}
				tmpList := []string{p.SiteID, p.ProgramName}
				newList = append(newList, tmpList)
			}

		}
		fmt.Println(newList)

	}
}
